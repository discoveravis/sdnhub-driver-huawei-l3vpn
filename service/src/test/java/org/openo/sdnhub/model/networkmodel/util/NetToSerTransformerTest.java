/*
 * Copyright 2016-2017 Huawei Technologies Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.openo.sdnhub.model.networkmodel.util;

import static org.junit.Assert.assertTrue;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.openo.baseservice.remoteservice.exception.ServiceException;
import org.openo.sdnhub.acwanservice.transformer.NetToSerTransformer;
import org.openo.sdnhub.model.networkmodel.servicetypes.AcProtectGroup;
import org.openo.sdnhub.model.networkmodel.servicetypes.AcProtectGroups;
import org.openo.sdnhub.model.networkmodel.servicetypes.BgpPeer;
import org.openo.sdnhub.model.networkmodel.servicetypes.CarServiceClass;
import org.openo.sdnhub.model.networkmodel.servicetypes.DiffServ;
import org.openo.sdnhub.model.networkmodel.servicetypes.Dot1q;
import org.openo.sdnhub.model.networkmodel.servicetypes.HubAc;
import org.openo.sdnhub.model.networkmodel.servicetypes.HubSpoke;
import org.openo.sdnhub.model.networkmodel.servicetypes.ISIS;
import org.openo.sdnhub.model.networkmodel.servicetypes.ImportRoute;
import org.openo.sdnhub.model.networkmodel.servicetypes.L3Vpn;
import org.openo.sdnhub.model.networkmodel.servicetypes.Ne;
import org.openo.sdnhub.model.networkmodel.servicetypes.Nes;
import org.openo.sdnhub.model.networkmodel.servicetypes.Ospf;
import org.openo.sdnhub.model.networkmodel.servicetypes.OspfArea;
import org.openo.sdnhub.model.networkmodel.servicetypes.OspfNetworkSbi;
import org.openo.sdnhub.model.networkmodel.servicetypes.Port;
import org.openo.sdnhub.model.networkmodel.servicetypes.Protocol;
import org.openo.sdnhub.model.networkmodel.servicetypes.Qos;
import org.openo.sdnhub.model.networkmodel.servicetypes.QosIfPhb;
import org.openo.sdnhub.model.networkmodel.servicetypes.QosIfQueueProfile;
import org.openo.sdnhub.model.networkmodel.servicetypes.QosIfTrafficPolicy;
import org.openo.sdnhub.model.networkmodel.servicetypes.TopoService;
import org.openo.sdnhub.model.networkmodel.servicetypes.Vrrp;
import org.openo.sdnhub.model.networkmodel.servicetypes.Vxlan;
import org.openo.sdno.model.uniformsbi.base.AutoSelectPolicy;
import org.openo.sdno.model.uniformsbi.base.AutoSelectTunnel;
import org.openo.sdno.model.uniformsbi.base.AutoSelectTunnels;
import org.openo.sdno.model.uniformsbi.base.MplsTePolicy;
import org.openo.sdno.model.uniformsbi.base.ParticularConstraint;
import org.openo.sdno.model.uniformsbi.base.ParticularConstraints;
import org.openo.sdno.model.uniformsbi.base.PathConstraint;
import org.openo.sdno.model.uniformsbi.base.PathProtectPolicy;
import org.openo.sdno.model.uniformsbi.base.QosIfCar;
import org.openo.sdno.model.uniformsbi.base.TunnelService;
import org.openo.sdno.model.uniformsbi.comnontypes.enums.AccessAction;
import org.openo.sdno.model.uniformsbi.comnontypes.enums.AdminStatus;
import org.openo.sdno.model.uniformsbi.comnontypes.enums.OperStatus;
import org.openo.sdno.model.uniformsbi.l3vpn.BgpRoute;
import org.openo.sdno.model.uniformsbi.l3vpn.BgpRoutes;
import org.openo.sdno.model.uniformsbi.l3vpn.HubGroup;
import org.openo.sdno.model.uniformsbi.l3vpn.HubGroups;
import org.openo.sdno.model.uniformsbi.l3vpn.IsisRoute;
import org.openo.sdno.model.uniformsbi.l3vpn.L2Access;
import org.openo.sdno.model.uniformsbi.l3vpn.L3Ac;
import org.openo.sdno.model.uniformsbi.l3vpn.L3Access;
import org.openo.sdno.model.uniformsbi.l3vpn.L3Acs;
import org.openo.sdno.model.uniformsbi.l3vpn.L3LoopbackIfs;
import org.openo.sdno.model.uniformsbi.l3vpn.Route;
import org.openo.sdno.model.uniformsbi.l3vpn.Routes;
import org.openo.sdno.model.uniformsbi.l3vpn.SpokeAc;
import org.openo.sdno.model.uniformsbi.l3vpn.SpokeGroup;
import org.openo.sdno.model.uniformsbi.l3vpn.StaticRoute;
import org.openo.sdno.model.uniformsbi.l3vpn.StaticRoutes;
import org.openo.sdno.model.uniformsbi.l3vpn.TopologyService;

public class NetToSerTransformerTest {

    private static final String TOPOLOGY_TYPE = "fullMesh";

    public PathProtectPolicy pathProtPolicy() {
        PathProtectPolicy pathProtectPolicy = new PathProtectPolicy();
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        return pathProtectPolicy;
    }

    public BgpPeer constructBgpPeer() {
        BgpPeer bgpPeer = new BgpPeer();
        bgpPeer.setAdvertiseCommunity(true);
        bgpPeer.setAdvertiseExtCommunity(true);
        bgpPeer.setHoldTime(1);
        bgpPeer.setKeepAliveTime(1);
        bgpPeer.setPassword("password");
        bgpPeer.setPeerIp("peerIp");
        bgpPeer.setRemoteAs("remoteAs");
        return bgpPeer;
    }

    public BgpRoute constructBgpRoute() {
        BgpRoute bgpRoute = new BgpRoute();
        bgpRoute.setAdvertiseCommunity(true);
        bgpRoute.setAdvertiseExtCommunity(true);
        bgpRoute.setHoldTime(1);
        bgpRoute.setKeepaliveTime(1);
        bgpRoute.setLocalAs("localAs");
        bgpRoute.setLocalIp("localIp");
        bgpRoute.setPassword("password");
        bgpRoute.setPeerIp("peerIp");
        bgpRoute.setRemoteAs("remoteAs");
        return bgpRoute;
    }

    public QosIfCar downstream() {
        QosIfCar downstreamBandwidth = new QosIfCar();
        downstreamBandwidth.setCbs(1111111111);
        downstreamBandwidth.setCir(1111111111);
        downstreamBandwidth.setEnable(true);
        downstreamBandwidth.setPbs(1111111111);
        downstreamBandwidth.setPir(1111111111);
        downstreamBandwidth.setUuid("uuid");
        Object val3 = new Object();
        downstreamBandwidth.setValue4Po("poFieldName", val3);
        return downstreamBandwidth;
    }

    public QosIfCar upstream() {
        QosIfCar upstreamBandwidth = new QosIfCar();
        upstreamBandwidth.setCbs(1111111111);
        upstreamBandwidth.setCir(1111111111);
        upstreamBandwidth.setEnable(true);
        upstreamBandwidth.setPbs(11111111);
        upstreamBandwidth.setPir(1111111111);
        upstreamBandwidth.setUuid("uuid");
        Object val1 = new Object();
        upstreamBandwidth.setValue4Po("poFieldName", val1);
        return upstreamBandwidth;
    }

    public L2Access createL2Access() {
        L2Access l2Access = new L2Access();
        AccessAction accessAction = AccessAction.PUSH;
        l2Access.setAccessAction(accessAction);
        l2Access.setDot1qVlanBitmap(1);
        l2Access.setL2AccessType("l2AccessType");
        l2Access.setPushVlanId("pushVlanId");
        l2Access.setQinqCvlanBitmap("qinqCvlanBitmap");
        l2Access.setQinqSvlanBitmap("qinqSvlanBitmap");
        l2Access.setSwapVlanId("swapVlanId");
        return l2Access;
    }

    public org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn createNbil3Vpn(
            org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn, L3Acs acs,
            org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup) {
        nbil3Vpn.setAcs(acs);
        AdminStatus adminStatus1 = AdminStatus.ADMIN_UP;
        nbil3Vpn.setAdminStatus(adminStatus1);
        nbil3Vpn.setDescription("description");
        org.openo.sdno.model.uniformsbi.l3vpn.DiffServ diffServ1 = new org.openo.sdno.model.uniformsbi.l3vpn.DiffServ();
        nbil3Vpn.setDiffServ(diffServ1);
        nbil3Vpn.setFrr(true);
        nbil3Vpn.setIpMtu(1);
        L3LoopbackIfs l3Loopbackifs = new L3LoopbackIfs();
        nbil3Vpn.setL3Loopbackifs(l3Loopbackifs);
        nbil3Vpn.setName("name");
        OperStatus operStatus = OperStatus.OPERATE_UP;
        nbil3Vpn.setOperStatus(operStatus);
        nbil3Vpn.setTenantId("tenantId");
        nbil3Vpn.setTopology(TOPOLOGY_TYPE);
        return nbil3Vpn;
    }

    public CarServiceClass createCarServiceClass() {
        CarServiceClass carServiceClass = new CarServiceClass();
        carServiceClass.setColor("color");
        carServiceClass.setFlowColor("flowColor");
        carServiceClass.setPassOrDiscard("passOrDiscard");
        carServiceClass.setServiceClass("serviceClass");
        return carServiceClass;
    }

    @Test
    public void testTransformModel() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        Vrrp vrrp1 = new Vrrp();
        vrrp1.setVirtualIp("virtualIp");
        acprotectGroup.setVrrp(vrrp1);
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        tunnelService.setAutoSelect(autoSelect);
        tunnelService.setMplsTe(mplsTe);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelNullL2Access() throws ServiceException {
        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        Vrrp vrrp1 = new Vrrp();
        vrrp1.setVirtualIp("virtualIp");
        acprotectGroup.setVrrp(vrrp1);
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(null);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        createL2Access();
        l3Ac.setL2Access(null);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelNullL3Access() throws ServiceException {
        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        Vrrp vrrp1 = new Vrrp();
        vrrp1.setVirtualIp("virtualIp");
        acprotectGroup.setVrrp(vrrp1);
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(null);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(null);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelNullStaticRoutes() throws ServiceException {
        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        Vrrp vrrp1 = new Vrrp();
        vrrp1.setVirtualIp("virtualIp");
        acprotectGroup.setVrrp(vrrp1);
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(null);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelNullSpokeGroup() throws ServiceException {
        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        Vrrp vrrp1 = new Vrrp();
        vrrp1.setVirtualIp("virtualIp");
        acprotectGroup.setVrrp(vrrp1);
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(null);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(null);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelNullHubGroup() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        Vrrp vrrp1 = new Vrrp();
        vrrp1.setVirtualIp("virtualIp");
        acprotectGroup.setVrrp(vrrp1);
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(null);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(null);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelNullHubSpoke() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        Vrrp vrrp1 = new Vrrp();
        vrrp1.setVirtualIp("virtualIp");
        acprotectGroup.setVrrp(vrrp1);
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(null);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();

        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(null);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelNullVrrp() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();

        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelNullL3VpnConfig() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        NetToSerTransformer.transformModel(l3vpn);
    }

    @Test
    public void testTransformModelNullProtocols() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(null);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelBranch1() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        // l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn.setAcs(acs);
        AdminStatus adminStatus1 = AdminStatus.ADMIN_UP;
        nbil3Vpn.setAdminStatus(adminStatus1);
        nbil3Vpn.setDescription("description");
        new org.openo.sdno.model.uniformsbi.l3vpn.DiffServ();
        nbil3Vpn.setDiffServ(null);
        nbil3Vpn.setFrr(true);
        nbil3Vpn.setIpMtu(1);
        L3LoopbackIfs l3Loopbackifs = new L3LoopbackIfs();
        nbil3Vpn.setL3Loopbackifs(l3Loopbackifs);
        nbil3Vpn.setName("name");
        OperStatus operStatus = OperStatus.OPERATE_UP;
        nbil3Vpn.setOperStatus(operStatus);
        nbil3Vpn.setTenantId("tenantId");
        nbil3Vpn.setTopology(TOPOLOGY_TYPE);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        l3vpn.setDiffServ(null);

        l3vpn.setAcProtectGroups(null);
        l3vpn.setFrr(null);

        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelBranch2() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        acProtectGroups.setAcprotectGroup(null);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setFrr("1");

        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelBranch2NullIsis() throws ServiceException {

        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        // acProtectGroups.setAcprotectGroup(acprotectGroup);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(null);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        acProtectGroups.setAcprotectGroup(null);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setFrr("1");

        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelBranch2NullAutoSelect() throws ServiceException {
        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(bgpList);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(null);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");

        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(null);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        acProtectGroups.setAcprotectGroup(null);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setFrr("1");

        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }

    @Test
    public void testTransformModelBranch2NullBgp() throws ServiceException {
        L3Vpn l3vpn = new L3Vpn();
        DiffServ diffServ = new DiffServ();
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        AcProtectGroups acProtectGroups = new AcProtectGroups();
        AcProtectGroup acprotectGroup = new AcProtectGroup();
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setAdminStatus("ADMIN_UP");
        l3vpn.setName("name");
        l3vpn.setFrr("1");
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs acs1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Acs();
        List<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac> l3AcList1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac>();
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac l3ac1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Ac();
        l3ac1.setId("id");
        org.openo.sdnhub.model.networkmodel.servicetypes.L2Access l2Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L2Access();
        l2Access1.setAccessType("accessType");
        Dot1q dot1q = new Dot1q();
        dot1q.setLtpId("ltpId");
        dot1q.setVlanId(1);
        l2Access1.setDot1q(dot1q);
        Port port = new Port();
        port.setLtpId("ltpId");
        l2Access1.setPort(port);
        Vxlan vxlan = new Vxlan();
        vxlan.setVniId(1);
        l2Access1.setVxlan(vxlan);
        l3ac1.setL2Access(l2Access1);
        org.openo.sdnhub.model.networkmodel.servicetypes.L3Access l3Access1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.L3Access();
        l3Access1.setAddress("address");
        Protocol protocol1 = new Protocol();
        BgpPeer bgpPeer = constructBgpPeer();
        List<BgpPeer> bgpList = new ArrayList<BgpPeer>();
        bgpList.add(bgpPeer);
        protocol1.setBgp(null);
        ISIS isis = new ISIS();
        isis.setNetworkEntity("networkEntity");
        protocol1.setIsis(isis);
        Ospf ospf = new Ospf();
        OspfArea ospfArea = new OspfArea();
        ospfArea.setId("id");
        OspfNetworkSbi ospfNetworkSbi = new OspfNetworkSbi();
        ospfNetworkSbi.setIpPrefix("ipPrefix");
        List<OspfNetworkSbi> OspfNetworkSbiList = new ArrayList<OspfNetworkSbi>();
        OspfNetworkSbiList.add(ospfNetworkSbi);
        ospfArea.setNetworks(OspfNetworkSbiList);
        List<OspfArea> OspfAreaList = new ArrayList<OspfArea>();
        OspfAreaList.add(ospfArea);
        ospf.setArea(OspfAreaList);
        ImportRoute importRoute = new ImportRoute();
        importRoute.setType("type");
        List<ImportRoute> importRoutesList = new ArrayList<ImportRoute>();
        importRoutesList.add(importRoute);
        ospf.setImportRoutes(importRoutesList);
        protocol1.setOspf(ospf);
        protocol1.setType("type");
        List<Protocol> protocolsList = new ArrayList<>();
        protocolsList.add(protocol1);
        l3Access1.setProtocols(protocolsList);
        org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute staticRoute1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute();
        staticRoute1.setDescription("description");
        staticRoute1.setIpPrefix("ipPrefix");
        staticRoute1.setNextHop("nextHop");
        staticRoute1.setPreference(1);
        staticRoute1.setTrackBfdEnable("trackBfdEnable");
        List<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute> staticRoutesList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.StaticRoute>();
        staticRoutesList.add(staticRoute1);
        l3Access1.setStaticRoutes(staticRoutesList);
        l3ac1.setL3Access(l3Access1);
        l3ac1.setNeId("neId");
        Qos qos = new Qos();
        org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar qosIfCar =
                new org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar();
        CarServiceClass carServiceClass = createCarServiceClass();
        qosIfCar.setCarServiceClass(carServiceClass);
        BigInteger cbs = null;
        qosIfCar.setCbs(cbs);
        BigInteger cir = null;
        qosIfCar.setCir(cir);
        qosIfCar.setDirection("direction");
        qosIfCar.setEnable(true);
        BigInteger pbs = null;
        qosIfCar.setPbs(pbs);
        BigInteger pir = null;
        qosIfCar.setPir(pir);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar> qosIfCarList =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.QosIfCar>();
        qosIfCarList.add(qosIfCar);
        qos.setQosIfCars(qosIfCarList);
        QosIfPhb qosIfPhb = new QosIfPhb();
        qosIfPhb.setDirection("direction");
        qosIfPhb.setPhbMap(true);
        qosIfPhb.setTrust8021p(true);
        qosIfPhb.setTrustUpstream(true);
        List<QosIfPhb> qosIfPhbList = new ArrayList<QosIfPhb>();
        qosIfPhbList.add(qosIfPhb);
        qos.setQosIfPhbs(qosIfPhbList);
        QosIfQueueProfile qosIfQueueProfile = new QosIfQueueProfile();
        qosIfQueueProfile.setDirection("direction");
        qosIfQueueProfile.setQueueProfileId("queueProfileId");
        List<QosIfQueueProfile> qosIfQueueProfileList = new ArrayList<QosIfQueueProfile>();
        qosIfQueueProfileList.add(qosIfQueueProfile);
        qos.setQosIfQueueProfiles(qosIfQueueProfileList);
        QosIfTrafficPolicy qosIfTrafficPolicy = new QosIfTrafficPolicy();
        qosIfTrafficPolicy.setDirection("direction");
        qosIfTrafficPolicy.setTrafficPolicyId("trafficPolicyId");
        List<QosIfTrafficPolicy> qosIfTrafficPolicyList = new ArrayList<QosIfTrafficPolicy>();
        qosIfTrafficPolicyList.add(qosIfTrafficPolicy);
        qos.setQosIfTrafficPolicys(qosIfTrafficPolicyList);
        l3ac1.setQos(qos);
        l3ac1.setUserLabel("userLabel");
        l3AcList1.add(l3ac1);
        acs1.setL3Ac(l3AcList1);
        l3vpn.setAcs(acs1);
        l3vpn.setId("id");
        l3vpn.setIpMtu(1);
        l3vpn.setLabelApplyMode("labelApplyMode");
        l3vpn.setMode("mode");
        Nes nes = new Nes();
        Ne ne = new Ne();
        ne.setId("id");
        List<Ne> neList = new ArrayList<Ne>();
        neList.add(ne);
        nes.setNes(neList);
        l3vpn.setNes(nes);
        TopoService topoService1 = new TopoService();
        HubSpoke hubSpoke = new HubSpoke();
        HubAc hubAc = new HubAc();
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        List<HubAc> hubGroup = new ArrayList<HubAc>();
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup spokeGroup1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeGroup();
        spokeGroup1.setLocalBridge(true);
        List<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc> spokeAcs1 =
                new ArrayList<org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc>();
        org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc element =
                new org.openo.sdnhub.model.networkmodel.servicetypes.SpokeAc();
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        TopoService topoService = new TopoService();
        topoService1.setHubSpoke(hubSpoke);
        l3vpn.setTopoService(topoService1);
        org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService tunnelService1 =
                new org.openo.sdnhub.model.networkmodel.servicetypes.TunnelService();
        TunnelService tunnelService = new TunnelService();
        AutoSelectPolicy autoSelect = new AutoSelectPolicy();
        AutoSelectTunnels autoSelectTunnels = new AutoSelectTunnels();
        AutoSelectTunnel autoSelectTunnel = new AutoSelectTunnel();
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        List<AutoSelectTunnel> autoSelectTunnelList = new ArrayList<AutoSelectTunnel>();
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        MplsTePolicy mplsTe = new MplsTePolicy();
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        PathConstraint pathConstraint = new PathConstraint();
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        PathProtectPolicy pathProtectPolicy = pathProtPolicy();

        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        ParticularConstraints particularConstraints = new ParticularConstraints();
        ParticularConstraint particularConstraint = new ParticularConstraint();
        List<String> bindingTunnel = new ArrayList<String>();
        particularConstraint.setBindingTunnel(bindingTunnel);
        List<ParticularConstraint> particularConstraintList = new ArrayList<ParticularConstraint>();
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        Object val = new Object();
        tunnelService.setValue4Po("poFieldName", val);
        l3vpn.setTunnelService(tunnelService1);
        l3vpn.setUserLabel("userLabel");
        hubAc.setAcId("acId");
        hubAc.setHubDirection("hubDirection");
        hubGroup.add(hubAc);
        hubSpoke.setHubGroup(hubGroup);
        spokeGroup1.setLocalBridge(true);
        element.setAcId("acId");
        spokeAcs1.add(0, element);
        spokeGroup1.setSpokeAcs(spokeAcs1);
        hubSpoke.setSpokeGroup(spokeGroup1);
        topoService.setHubSpoke(hubSpoke);
        SpokeGroup spokeGroup = new SpokeGroup();
        spokeGroup.setLocalBridge(true);
        SpokeAc spokeAc = new SpokeAc();
        spokeAc.setAcId("acId");
        List<SpokeAc> spokeAcs = new ArrayList<SpokeAc>();
        spokeAcs.add(spokeAc);
        spokeGroup.setSpokeAcs(spokeAcs);
        org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup protectGroup =
                new org.openo.sdno.model.uniformsbi.l3vpn.ProtectGroup();
        protectGroup.setBackupAc("backUpAc");
        protectGroup.setMasterAc("masterAc");
        org.openo.sdno.model.uniformsbi.l3vpn.Vrrp vrrp = new org.openo.sdno.model.uniformsbi.l3vpn.Vrrp();
        vrrp.setVirtualIp("virtualIp");
        protectGroup.setVrrp(vrrp);
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn nbil3Vpn = new org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn();
        L3Acs acs = new L3Acs();
        L3Ac l3Ac = new L3Ac();
        AdminStatus adminStatus = AdminStatus.ADMIN_UP;
        l3Ac.setAdminStatus(adminStatus);
        l3Ac.setDescription("description");
        QosIfCar downstreamBandwidth = downstream();
        l3Ac.setDownstreamBandwidth(downstreamBandwidth);
        l3Ac.setInboundQosPolicyId("inboundQosPolicyId");
        l3Ac.setInboundQueuePolicyId("inboundQueuePolicyId");
        L2Access l2Access = createL2Access();
        l3Ac.setL2Access(l2Access);
        L3Access l3Access = new L3Access();
        l3Access.setIpv4Address("ipv4Address");
        Routes routes = new Routes();
        Route route = new Route();
        BgpRoutes bgpRoutes = new BgpRoutes();
        BgpRoute bgpRoute = constructBgpRoute();
        List<BgpRoute> bgpRouteList = new ArrayList<BgpRoute>();
        bgpRouteList.add(bgpRoute);
        bgpRoutes.setBgpRoute(bgpRouteList);
        route.setBgpRoutes(bgpRoutes);
        IsisRoute isisRoute = new IsisRoute();
        isisRoute.setNetworkEntity("networkEntity");
        route.setIsisRoute(isisRoute);
        route.setRouteType("type");
        StaticRoutes staticRoutes = new StaticRoutes();
        StaticRoute staticRoute = new StaticRoute();
        staticRoute.setIpPrefix("ipPrefix");
        staticRoute.setNextHop("nextHop");
        List<StaticRoute> staticRouteList = new ArrayList<StaticRoute>();
        staticRouteList.add(staticRoute);
        staticRoutes.setStaticRoute(staticRouteList);
        route.setStaticRoutes(staticRoutes);
        List<Route> routeList = new ArrayList<Route>();
        routeList.add(route);
        routes.setRoute(routeList);
        l3Access.setRoutes(routes);
        l3Ac.setL3Access(l3Access);
        l3Ac.setLocalName("localName");
        l3Ac.setLtpId("ltpId");
        l3Ac.setName("name");
        l3Ac.setNeId("neId");
        OperStatus operStatus1 = OperStatus.OPERATE_UP;
        l3Ac.setOperStatus(operStatus1);
        l3Ac.setOutboundQosPolicyId("outboundQosPolicyId");
        l3Ac.setOutboundQueuePolicyId("outboundQueuePolicyId");
        l3Ac.setTenantId("tenantId");
        QosIfCar upstreamBandwidth = upstream();
        l3Ac.setUpstreamBandwidth(upstreamBandwidth);
        l3Ac.setUuid("uuid");
        Object val2 = new Object();
        l3Ac.setValue4Po("poFieldName", val2);
        List<L3Ac> l3AcList = new ArrayList<L3Ac>();
        l3AcList.add(l3Ac);
        acs.setL3Ac(l3AcList);
        nbil3Vpn = createNbil3Vpn(nbil3Vpn, acs, protectGroup);
        TopologyService topologyService = new TopologyService();
        HubGroups hubGroups = new HubGroups();
        List<HubGroup> hubGroupList = new ArrayList<HubGroup>();
        HubGroup e = new HubGroup();
        e.setAcId("acId");
        e.setHubDirection("hubDirection");
        hubGroupList.add(e);
        hubGroups.setHubGroup(hubGroupList);
        topologyService.setHubGroups(hubGroups);
        topologyService.setSpokeGroup(spokeGroup);
        nbil3Vpn.setTopologyService(topologyService);
        autoSelectTunnel.setPriority(1);
        autoSelectTunnel.setType("type");
        autoSelectTunnelList.add(autoSelectTunnel);
        autoSelectTunnels.setAutoSelectTunnel(autoSelectTunnelList);
        autoSelect.setAutoSelectTunnels(autoSelectTunnels);
        autoSelect.setLoadBalanceNumber(1);
        tunnelService.setAutoSelect(autoSelect);
        mplsTe.setBandwidth(1);
        mplsTe.setBesteffort(true);
        mplsTe.setBfdEnable(true);
        mplsTe.setCoRoute(true);
        mplsTe.setManageProtocol("manageProtocol");
        pathConstraint.setHoldupPriority(1);
        pathConstraint.setLatency(1);
        pathConstraint.setSetupPriority(1);
        mplsTe.setPathConstraint(pathConstraint);
        pathProtectPolicy.setBandwidthMode("bandwidthMode");
        pathProtectPolicy.setHotStandbyEnable(true);
        pathProtectPolicy.setRevertive(true);
        pathProtectPolicy.setType("type");
        pathProtectPolicy.setWtr(1);
        mplsTe.setPathProtectPolicy(pathProtectPolicy);
        mplsTe.setSharing(true);
        mplsTe.setSignalType("signalType");
        tunnelService.setMplsTe(mplsTe);
        particularConstraint.setBindingTunnel(bindingTunnel);
        particularConstraintList.add(particularConstraint);
        particularConstraints.setParticularConstraint(particularConstraintList);
        tunnelService.setParticularConstraints(particularConstraints);
        tunnelService.setType("type");
        tunnelService.setUuid("uuid");
        tunnelService.setValue4Po("poFieldName", val);
        nbil3Vpn.setTunnelService(tunnelService);
        nbil3Vpn.setUuid("uuid");
        nbil3Vpn.setValue4Po("poFieldName", val);
        diffServ.setColor("color");
        diffServ.setMode("mode");
        diffServ.setServiceClass("servieClass");
        l3vpn.setDiffServ(diffServ);
        acprotectGroup.setBackAcId("backAcId");
        acprotectGroup.setMasterAcId("masterAcId");
        acProtectGroups.setAcprotectGroup(null);
        l3vpn.setAcProtectGroups(acProtectGroups);
        l3vpn.setFrr("1");
        org.openo.sdno.model.uniformsbi.l3vpn.L3Vpn l3VpnSbi = NetToSerTransformer.transformModel(l3vpn);
        assertTrue(l3VpnSbi != null);
    }
}
